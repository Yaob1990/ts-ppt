{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","webpackCompilationHash":"13e0bed5f8a99e509045","result":{"data":{"deck":{"id":"d5d35288-f212-5055-934b-6c2f1a09339e","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Appear = makeShortcode(\"Appear\");\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"typescript \\u7279\\u6027\\u901F\\u89C8\"), mdx(\"hr\", null), mdx(\"p\", null, \"TypeScript \\u662F\\u4EC0\\u4E48\\uFF1F\"), mdx(\"h2\", null, \"JavaScript + \\u7C7B\\u578B\\u58F0\\u660E\"), mdx(\"p\", null, \"\\u5B83\\u53EF\\u4EE5\\u7F16\\u8BD1\\u6210\\u7EAF JavaScript\"), mdx(\"img\", {\n    \"src\": \"./img/ts-tutorial-intelli-sense.png\",\n    \"alt\": null\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\",\n    \"metastring\": \"title=\\\"开始使用 TypeScript\\\"  subtitle=\\\"通过ts-lib-scripts创建一个用来练习的 TypeScript 项目\\\"\",\n    \"title\": \"\\\"开始使用\",\n    \"TypeScript\\\"\": true,\n    \"\": true,\n    \"subtitle\": \"\\\"通过ts-lib-scripts创建一个用来练习的\",\n    \"TypeScript\": true,\n    \"项目\\\"\": true\n  }), \"\\nnpx ts-lib-scripts create ts-hello-world\\n\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1,3 title=\\\"基础类型\\\" subtitle=\\\"布尔值\\\"\",\n    \"1,3\": true,\n    \"title\": \"\\\"基础类型\\\"\",\n    \"subtitle\": \"\\\"布尔值\\\"\"\n  }), \"let isDone: boolean = false;\\n\\nisDone = 2; // Error,\\u4E0D\\u80FD\\u5C06\\u7C7B\\u578B\\\"2\\\"\\u5206\\u914D\\u7ED9\\u7C7B\\u578B\\u201Cboolean\\u201D\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1,2,3,4 title=\\\"基础类型\\\" subtitle=\\\"数字\\\"\",\n    \"1,2,3,4\": true,\n    \"title\": \"\\\"基础类型\\\"\",\n    \"subtitle\": \"\\\"数字\\\"\"\n  }), \"const decLiteral: number = 6;\\nconst hexLiteral: number = 0xf00d;\\nconst binaryLiteral: number = 0b1010;\\nconst octalLiteral: number = 0o744;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1,2 title=\\\"基础类型\\\" subtitle=\\\"字符串\\\"\",\n    \"1,2\": true,\n    \"title\": \"\\\"基础类型\\\"\",\n    \"subtitle\": \"\\\"字符串\\\"\"\n  }), \"let name: string = 'bob';\\nname = 'smith';\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"1 title=\\\"基础类型\\\" subtitle=\\\"数组: 可以在元素类型后面接上[]，表示由此类型元素组成的一个数组\\\"\",\n    \"title\": \"\\\"基础类型\\\"\",\n    \"subtitle\": \"\\\"数组:\",\n    \"可以在元素类型后面接上[]，表示由此类型元素组成的一个数组\\\"\": true\n  }), \"let list: number[] = [1, 2, 3];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"1 title=\\\"基础类型\\\" subtitle=\\\"数组: 使用数组泛型，Array<元素类型>定义\\\"\",\n    \"title\": \"\\\"基础类型\\\"\",\n    \"subtitle\": \"\\\"数组:\",\n    \"使用数组泛型，Array<元素类型>定义\\\"\": true\n  }), \"let list: Array<number> = [1, 2, 3];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"2,4,5,6,7,8,9 title=\\\"元组\\\"\",\n    \"2,4,5,6,7,8,9\": true,\n    \"title\": \"\\\"元组\\\"\"\n  }), \"// \\u5B9A\\u4E49\\u5143\\u7956\\u7C7B\\u578B\\nlet x: [string, number];\\n// \\u521D\\u59CB\\u5316\\nx = ['hello', 10]; // OK\\nx = [10, 'hello']; // \\u9519\\u8BEF\\uFF0C\\u7C7B\\u578B\\u4E0D\\u5339\\u914D\\n\\nlet y = [string,number,boolean?] \\ny = ['a',1,true]\\ny = ['a',1]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"1 title=\\\"any\\\" subtitle=\\\"有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型,  我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查,就可以指定any\\\"\",\n    \"title\": \"\\\"any\\\"\",\n    \"subtitle\": \"\\\"有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型,\",\n    \"\": true,\n    \"我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查,就可以指定any\\\"\": true\n  }), \"let notSure: any = 4;\\nnotSure = 'maybe a string instead';\\nnotSure = false;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"void\\\" subtitle=\\\"某种程度上来说，void类型像是与any类型相反，它表示没有任何类型。当一个函数没有返回值时，我们通常会把返回值的类型设为void\\\"\",\n    \"title\": \"\\\"void\\\"\",\n    \"subtitle\": \"\\\"某种程度上来说，void类型像是与any类型相反，它表示没有任何类型。当一个函数没有返回值时，我们通常会把返回值的类型设为void\\\"\"\n  }), \"function fn(): void {\\n  console.log('\\u8FD9\\u662F\\u4E00\\u4E2A\\u51FD\\u6570\\u7C7B\\u578B\\u58F0\\u660E');\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"null和undefined\\\" subtitle=\\\"和void相似，它们的本身的类型用处不是很大。默认情况下null和undefined是所有类型的子类型\\\"\",\n    \"title\": \"\\\"null和undefined\\\"\",\n    \"subtitle\": \"\\\"和void相似，它们的本身的类型用处不是很大。默认情况下null和undefined是所有类型的子类型\\\"\"\n  }), \"let u: undefined = undefined;\\nlet n: null = null;\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1,2,3,4,5 title=\\\"枚举\\\" subtitle=\\\"使用枚举我们可以定义一些带名字的常量，可以清晰地表达意图或创建一组有区别的用例\\\"\",\n    \"1,2,3,4,5\": true,\n    \"title\": \"\\\"枚举\\\"\",\n    \"subtitle\": \"\\\"使用枚举我们可以定义一些带名字的常量，可以清晰地表达意图或创建一组有区别的用例\\\"\"\n  }), \"enum Color {\\n  Red,\\n  Green,\\n  Blue,\\n}\\nconst c: Color = Color.Green;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"2 title=\\\"枚举\\\" subtitle=\\\"默认情况下，从0开始为元素编号。 你也可以手动的指定成员的数值\\\"\",\n    \"title\": \"\\\"枚举\\\"\",\n    \"subtitle\": \"\\\"默认情况下，从0开始为元素编号。\",\n    \"你也可以手动的指定成员的数值\\\"\": true\n  }), \"enum Color {\\n  Red = 1,\\n  Green,\\n  Blue,\\n}\\nconst c: Color = Color.Green;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"2,3,4 title=\\\"枚举\\\" subtitle=\\\"全部都采用手动赋值\\\"\",\n    \"2,3,4\": true,\n    \"title\": \"\\\"枚举\\\"\",\n    \"subtitle\": \"\\\"全部都采用手动赋值\\\"\"\n  }), \"enum Color {\\n  Red = 1,\\n  Green = 2,\\n  Blue = 4,\\n}\\nconst c: Color = Color.Green;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"8\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"8 title=\\\"枚举\\\" subtitle=\\\"输出什么？\\\"\",\n    \"title\": \"\\\"枚举\\\"\",\n    \"subtitle\": \"\\\"输出什么？\\\"\"\n  }), \"enum Color {\\n  Red = 1,\\n  Green,\\n  Blue,\\n}\\nlet colorName: string = Color[2];\\n\\nconsole.log(colorName);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"8\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"8 title=\\\"枚举\\\" subtitle=\\\"输出'Green',因为从枚举来看，Red值为1，Green值为2，Blue值为3\\\"\",\n    \"title\": \"\\\"枚举\\\"\",\n    \"subtitle\": \"\\\"输出'Green',因为从枚举来看，Red值为1，Green值为2，Blue值为3\\\"\"\n  }), \"enum Color {\\n  Red = 1,\\n  Green,\\n  Blue,\\n}\\nlet colorName: string = Color[2];\\n\\nconsole.log(colorName);\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1,3,4,6,7,8,9 title=\\\"对象\\\" subtitle=\\\"object 表示非原始类型，也就是除 number，string，boolean，symbol，null 或 undefined 之外的类型。\\\"\",\n    \"1,3,4,6,7,8,9\": true,\n    \"title\": \"\\\"对象\\\"\",\n    \"subtitle\": \"\\\"object\",\n    \"表示非原始类型，也就是除\": true,\n    \"number，string，boolean，symbol，null\": true,\n    \"或\": true,\n    \"undefined\": true,\n    \"之外的类型。\\\"\": true\n  }), \"declare function create(o: object | null): void;\\n\\ncreate({ prop: 0 }); // OK\\ncreate(null); // OK\\n\\ncreate(42); // Error\\ncreate('string'); // Error\\ncreate(false); // Error\\ncreate(undefined); // Error\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"3 title=\\\"类型断言\\\" subtitle=\\\"方式一：\\\"尖括号\\\"语法\\\"\",\n    \"title\": \"\\\"类型断言\\\"\",\n    \"subtitle\": \"\\\"方式一：\\\"尖括号\\\"语法\\\"\"\n  }), \"const someValue: any = 'this is a string';\\n\\nconst strLength: number = (<string>someValue).length;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"3 title=\\\"类型断言\\\" subtitle=\\\"方式二：as语法\\\"\",\n    \"title\": \"\\\"类型断言\\\"\",\n    \"subtitle\": \"\\\"方式二：as语法\\\"\"\n  }), \"const someValue: any = 'this is a string';\\n\\nconst strLength: number = (someValue as string).length;\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"\\u4EE5\\u4E0A\\u4E24\\u79CD\\u7C7B\\u578B\\u65AD\\u8A00\\u7684\\u5F62\\u5F0F\\u662F\\u7B49\\u4EF7\\u7684\"), mdx(\"p\", null, \"\\u63A8\\u8350\\u4F7F\\u7528 as \\u8BED\\u6CD5\\u5F62\\u5F0F\\u7684\\u65AD\\u8A00\\u3002\"), mdx(\"hr\", null), mdx(\"p\", null, \"ts \\u975E\\u7A7A\\u65AD\\u8A00\\u5173\\u952E\\u5B57(!)\"), mdx(\"p\", null, \"!\\u548C?\\u662F\\u76F8\\u5BF9\\u7684\\uFF0C\\u8868\\u793A\\u5F3A\\u5236\\u89E3\\u6790\\uFF08\\u4E5F\\u5C31\\u662F\\u544A\\u8BC9 typescript \\u7F16\\u8BD1\\u5668\\uFF0C\\u8FD9\\u91CC\\u4E00\\u5B9A\\u6709\\u503C\\uFF09\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"3 subtitle=\\\"tslint检查会报错，原因是element可能为null\\\"\",\n    \"subtitle\": \"\\\"tslint检查会报错，原因是element可能为null\\\"\"\n  }), \"const element = document.querySelector('.item');\\n\\nconsole.log(element.getBoundingClientRect());\\n\\nconsole.log(element!.getBoundingClientRect());\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"5 subtitle=\\\"如果某个变量的类型为Xxx | null | undefined，但是你确定在用这个变量时它肯定有值，那么你可以使用!来告诉 TypeScript 这个变量不可能为null或undefined。\\\"\",\n    \"subtitle\": \"\\\"如果某个变量的类型为Xxx\",\n    \"|\": true,\n    \"null\": true,\n    \"undefined，但是你确定在用这个变量时它肯定有值，那么你可以使用!来告诉\": true,\n    \"TypeScript\": true,\n    \"这个变量不可能为null或undefined。\\\"\": true\n  }), \"const element = document.querySelector('.item');\\n\\nconsole.log(element.getBoundingClientRect());\\n\\nconsole.log(element!.getBoundingClientRect());\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1,2,3 title=\\\"接口\\\" subtitle=\\\"接口可以为对象定义结构信息\\\"\",\n    \"1,2,3\": true,\n    \"title\": \"\\\"接口\\\"\",\n    \"subtitle\": \"\\\"接口可以为对象定义结构信息\\\"\"\n  }), \"                        interface Props {\\n                          userName: string;\\n                        }\\n                        \\n                        function Hello(props: Props) {\\n                          return <div>Hello, {props.userName}</div>;\\n                        }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1,2,3 title=\\\"可选属性\\\" subtitle=\\\"默认情况下，接口中的属性是必须的，不指定则会提示错误。如果属性不是必需的，则可以用?声明属性为可选属性\\\"\",\n    \"1,2,3\": true,\n    \"title\": \"\\\"可选属性\\\"\",\n    \"subtitle\": \"\\\"默认情况下，接口中的属性是必须的，不指定则会提示错误。如果属性不是必需的，则可以用?声明属性为可选属性\\\"\"\n  }), \"                      interface SquareConfig {\\n                        color?: string;\\n                        width?: number;\\n                      }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1,2,3,4 title=\\\"只读属性\\\" subtitle=\\\"一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性\\\"\",\n    \"1,2,3,4\": true,\n    \"title\": \"\\\"只读属性\\\"\",\n    \"subtitle\": \"\\\"一些对象属性只能在对象刚刚创建的时候修改其值。\",\n    \"你可以在属性名前用\": true,\n    \"readonly来指定只读属性\\\"\": true\n  }), \"\\n                        interface Point {\\n                          readonly x: number;\\n                          readonly y: number;\\n                        }\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"1 title=\\\"只读属性\\\" subtitle=\\\"你可以通过赋值一个对象字面量来构造一个Point。 \\\"\",\n    \"title\": \"\\\"只读属性\\\"\",\n    \"subtitle\": \"\\\"你可以通过赋值一个对象字面量来构造一个Point。\",\n    \"\\\"\": true\n  }), \"                    let p1: Point = { x: 10, y: 20 };\\n\\n                    p1.x = 5; // error!\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"3 title=\\\"只读属性\\\" subtitle=\\\" 赋值后， x和y再也不能被改变了\\\"\",\n    \"title\": \"\\\"只读属性\\\"\",\n    \"subtitle\": \"\\\"\",\n    \"赋值后，\": true,\n    \"x和y再也不能被改变了\\\"\": true\n  }), \"                    let p1: Point = { x: 10, y: 20 };\\n\\n                    p1.x = 5; // error!\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"\\u51FD\\u6570\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:3 subtitle=\\\"javascript\\\"\",\n    \"1:3\": true,\n    \"subtitle\": \"\\\"javascript\\\"\"\n  }), \"function add(x, y) {\\n  return x + y;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1:3 subtitle=\\\"typescripot\\\"\",\n    \"1:3\": true,\n    \"subtitle\": \"\\\"typescripot\\\"\"\n  }), \"function add(x: number, y: number): number {\\n  return x + y;\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"1 subtitle=\\\"给函数参数和返回值赋值\\\"\",\n    \"subtitle\": \"\\\"给函数参数和返回值赋值\\\"\"\n  }), \"    function add(x: number, y: number): number {\\n      return x + y;\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"2 subtitle=\\\"ts错误提示：\\\"\\\"2\\\"不能赋给类型“number”的参数。\\\"\",\n    \"subtitle\": \"\\\"ts错误提示：\\\"\\\"2\\\"不能赋给类型“number”的参数。\\\"\"\n  }), \"            add(1, 2); // OK\\n            add(1, '2'); // error\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"\\u51FD\\u6570\\u7C7B\\u578B\"), mdx(\"p\", null, \"\\u51FD\\u6570\\u4F5C\\u4E3A\\u503C\\u4F20\\u9012\\u65F6\\u7684\\u7C7B\\u578B\\u58F0\\u660E\\u3002\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"                  function calc(\\n                    x: number,\\n                    y: number,\\n                    calcFn: ???,\\n                  ): number {\\n                    return calcFn(x, y);\\n                  }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"4 subtitle=\\\"calcFn的类型怎么声明？\\\"\",\n    \"subtitle\": \"\\\"calcFn的类型怎么声明？\\\"\"\n  }), \"                  function calc(\\n                    x: number,\\n                    y: number,\\n                    calcFn: ???,\\n                  ): number {\\n                    return calcFn(x, y);\\n                  }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"4\"\n  }), \"            function calc(\\n              x: number,\\n              y: number,\\n              calcFn: (x: number, y: number) => number,\\n            ): number {\\n              return calcFn(x, y);\\n            }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1:5\",\n    \"1:5\": true\n  }), \"        function add(x: number, y: number): number {\\n          return x + y;\\n        }\\n\\n        calc(1, 2, add); // ok\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1:5\",\n    \"1:5\": true\n  }), \"        function pow(x: number, y: number): number {\\n          return x ** y;\\n        }\\n\\n        calc(1, 2, pow); // ok\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1:5\",\n    \"1:5\": true\n  }), \"        function divide(x: number, y: number): number {\\n          return x / y;\\n        }\\n\\n        calc(2, 1, divide); // ok\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1:5\",\n    \"1:5\": true\n  }), \"        function sum(x: number, y: number, z: number): number {\\n          return x + y + z;\\n        }\\n\\n        calc(1, 2, sum); // error\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"\\u53EF\\u9009\\u7684\\u51FD\\u6570\\u53C2\\u6570\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"        function buildName(firstName: string, lastName?: string) {\\n          return firstName + lastName;\\n        }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"1 subtitle=\\\"参数后面添加?，表示该参数可选\\\"\",\n    \"subtitle\": \"\\\"参数后面添加?，表示该参数可选\\\"\"\n  }), \"        function buildName(firstName: string, lastName?: string) {\\n          return firstName + lastName;\\n        }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"          buildName('Bob'); // ok\\n          buildName('Bob', 'Alias'); // ok\\n          buildName('Bob', 'Alias', 'Axx'); // error\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"\\u51FD\\u6570\\u53C2\\u6570\\u9ED8\\u8BA4\\u503C\"), mdx(\"p\", null, \"\\u53EF\\u4EE5\\u4E3A\\u53EF\\u9009\\u53C2\\u6570\\u6DFB\\u52A0\\u4E0A\\u9ED8\\u8BA4\\u503C\\u3002\"), mdx(\"p\", null, \"\\u8C03\\u7528\\u51FD\\u6570\\u65F6\\uFF0C\\u5982\\u679C\\u8BE5\\u51FD\\u6570\\u53C2\\u6570\\u4E3A\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \"\\uFF0C\\u5219\\u8BE5\\u53C2\\u6570\\u4E3A\\u9ED8\\u8BA4\\u503C\\u3002\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function buildName(firstName: string, lastName: string = 'Smith') {\\n  return firstName + lastName;\\n}\\n\\nconst result1 = buildName('Bob'); // OK, result1 = Bob Smith\\nconst result2 = buildName('Bob', 'Adams'); // OK, result2 = Bob Adams\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"\\u7C7B\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"          class Animal {\\n            name: string;\\n\\n            constructor(theName: string) {\\n              this.name = theName;\\n            }\\n\\n            move(distanceInMeters: number) {\\n              alert(this.name + 'moved' + distanceInMeters + 'm');\\n            }\\n          }\\n\\n          const animal = new Animal('Kiki');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"2 subtitle=\\\"给类的成员属性添加类型\\\"\",\n    \"subtitle\": \"\\\"给类的成员属性添加类型\\\"\"\n  }), \"class Animal {\\n  name: string;\\n\\n  constructor(theName: string) {\\n    this.name = theName;\\n  }\\n\\n  move(distanceInMeters: number) {\\n    alert(this.name + 'moved' + distanceInMeters + 'm');\\n  }\\n}\\n\\nconst animal = new Animal('Kiki');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"4 subtitle=\\\"给构造函数参数添加类型\\\"\",\n    \"subtitle\": \"\\\"给构造函数参数添加类型\\\"\"\n  }), \"class Animal {\\n  name: string;\\n\\n  constructor(theName: string) {\\n    this.name = theName;\\n  }\\n\\n  move(distanceInMeters: number) {\\n    alert(this.name + 'moved' + distanceInMeters + 'm');\\n  }\\n}\\n\\nconst animal = new Animal('Kiki');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"8\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"8 subtitle=\\\"给类的成员方法添加类型声明\\\"\",\n    \"subtitle\": \"\\\"给类的成员方法添加类型声明\\\"\"\n  }), \"class Animal {\\n  name: string;\\n\\n  constructor(theName: string) {\\n    this.name = theName;\\n  }\\n\\n  move(distanceInMeters: number) {\\n    alert(this.name + 'moved' + distanceInMeters + 'm');\\n  }\\n}\\n\\nconst animal = new Animal('Kiki');\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"public 修饰符\\\" subtitle=\\\"在TypeScript里，成员都默认为public。也可以明确的将一个成员标记成 public\\\"\",\n    \"title\": \"\\\"public\",\n    \"修饰符\\\"\": true,\n    \"subtitle\": \"\\\"在TypeScript里，成员都默认为public。也可以明确的将一个成员标记成\",\n    \"public\\\"\": true\n  }), \"class Animal {\\n  public name: string;\\n  public constructor(theName: string) {\\n    this.name = theName;\\n  }\\n  public move(distanceInMeters: number) {\\n    alert(this.name + 'moved' + distanceInMeters + 'm');\\n  }\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"2,8 title=\\\"private 修饰符\\\" subtitle=\\\"当成员被标记成 private时，它就不能在声明它的类的外部访问\\\"\",\n    \"2,8\": true,\n    \"title\": \"\\\"private\",\n    \"修饰符\\\"\": true,\n    \"subtitle\": \"\\\"当成员被标记成\",\n    \"private时，它就不能在声明它的类的外部访问\\\"\": true\n  }), \"class Animal {\\n  private name: string;\\n  constructor(theName: string) {\\n    this.name = theName;\\n  }\\n}\\n\\nnew Animal('Cat').name; // \\u9519\\u8BEF: 'name' \\u662F\\u79C1\\u6709\\u7684.\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"protected 修饰符\\\" subtitle=\\\"protected修饰符与 private修饰符的行为很相似，但有一点不同， protected成员在派生类中仍然可以访问\\\"\",\n    \"title\": \"\\\"protected\",\n    \"修饰符\\\"\": true,\n    \"subtitle\": \"\\\"protected修饰符与\",\n    \"private修饰符的行为很相似，但有一点不同，\": true,\n    \"protected成员在派生类中仍然可以访问\\\"\": true\n  }), \"class Person {\\n  protected name: string;\\n  constructor(name: string) {\\n    this.name = name;\\n  }\\n}\\n\\nclass Employee extends Person {\\n  private department: string;\\n\\n  constructor(name: string, department: string) {\\n    super(name);\\n    this.department = department;\\n  }\\n\\n  public getElevatorPitch() {\\n    return (\\n      'Hello, my name is' + this.name + 'and I work in' + this.department + '.'\\n    );\\n  }\\n}\\n\\nlet howard = new Employee('Howard', 'Sales');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"2,25 title=\\\"protected 修饰符\\\" subtitle=\\\"错误我们不能在 Person类外使用 name\\\"\",\n    \"2,25\": true,\n    \"title\": \"\\\"protected\",\n    \"修饰符\\\"\": true,\n    \"subtitle\": \"\\\"错误我们不能在\",\n    \"Person类外使用\": true,\n    \"name\\\"\": true\n  }), \"class Person {\\n  protected name: string;\\n  constructor(name: string) {\\n    this.name = name;\\n  }\\n}\\n\\nclass Employee extends Person {\\n  private department: string;\\n\\n  constructor(name: string, department: string) {\\n    super(name);\\n    this.department = department;\\n  }\\n\\n  public getElevatorPitch() {\\n    return (\\n      'Hello, my name is' + this.name + 'and I work in' + this.department + '.'\\n    );\\n  }\\n}\\n\\nlet howard = new Employee('Howard', 'Sales');\\nconsole.log(howard.getElevatorPitch());\\nconsole.log(howard.name); // \\u9519\\u8BEF\\u6211\\u4EEC\\u4E0D\\u80FD\\u5728 Person\\u7C7B\\u5916\\u4F7F\\u7528 name\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"2,24 title=\\\"protected 修饰符\\\" subtitle=\\\"我们仍然可以通过 Employee类的实例方法访问，因为 Employee是由 Person派生而来\\\"\",\n    \"2,24\": true,\n    \"title\": \"\\\"protected\",\n    \"修饰符\\\"\": true,\n    \"subtitle\": \"\\\"我们仍然可以通过\",\n    \"Employee类的实例方法访问，因为\": true,\n    \"Employee是由\": true,\n    \"Person派生而来\\\"\": true\n  }), \"class Person {\\n  protected name: string;\\n  constructor(name: string) {\\n    this.name = name;\\n  }\\n}\\n\\nclass Employee extends Person {\\n  private department: string;\\n\\n  constructor(name: string, department: string) {\\n    super(name);\\n    this.department = department;\\n  }\\n\\n  public getElevatorPitch() {\\n    return (\\n      'Hello, my name is' + this.name + 'and I work in' + this.department + '.'\\n    );\\n  }\\n}\\n\\nlet howard = new Employee('Howard', 'Sales');\\nconsole.log(howard.getElevatorPitch());\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"3,9,24 title=\\\"protected 修饰符\\\" subtitle=\\\"构造函数也可以被标记成 protected。 这意味着这个类不能在包含它的类外被实例化，但是能被继承\\\"\",\n    \"3,9,24\": true,\n    \"title\": \"\\\"protected\",\n    \"修饰符\\\"\": true,\n    \"subtitle\": \"\\\"构造函数也可以被标记成\",\n    \"protected。\": true,\n    \"这意味着这个类不能在包含它的类外被实例化，但是能被继承\\\"\": true\n  }), \"class Person {\\n  protected name: string;\\n  protected constructor(theName: string) {\\n    this.name = theName;\\n  }\\n}\\n\\n// Employee \\u80FD\\u591F\\u7EE7\\u627F Person\\nclass Employee extends Person {\\n  private department: string;\\n\\n  constructor(name: string, department: string) {\\n    super(name);\\n    this.department = department;\\n  }\\n\\n  public getElevatorPitch() {\\n    return (\\n      'Hello, my name is' + this.name + 'and I work in' + this.department + '.'\\n    );\\n  }\\n}\\n\\nlet howard = new Employee('Howard', 'Sales');\\nlet john = new Person('John'); // \\u9519\\u8BEF: 'Person' \\u7684\\u6784\\u9020\\u51FD\\u6570\\u662F\\u88AB\\u4FDD\\u62A4\\u7684.\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"\\u7C7B\\u578B\\u63A8\\u8BBA\"), mdx(\"p\", null, \"\\u5BF9\\u4E8E\\u80FD\\u591F\\u663E\\u800C\\u6613\\u89C1\\u7684\\u63A8\\u65AD\\u51FA\\u53D8\\u91CF\\u7C7B\\u578B\\u7684\\uFF0CTypeScript \\u5141\\u8BB8\\u6211\\u4EEC\\u7701\\u7565\\u7C7B\\u578B\\u58F0\\u660E\\uFF0C\\u8FD9\\u5C31\\u662F\\u7C7B\\u578B\\u63A8\\u8BBA\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"类型推论\\\"\",\n    \"title\": \"\\\"类型推论\\\"\"\n  }), \"                  let x: number = 0;\\n\\n                  x = 1; // OK\\n                  x = '1'; // error\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1,2,3,4 title=\\\"类型推论\\\" subtitle=\\\"x被赋值为0，所以我们一般会推测它的类型为number。对于这种显而易见的类型，TypeScript 允许我们省略类型声明\\\"\",\n    \"1,2,3,4\": true,\n    \"title\": \"\\\"类型推论\\\"\",\n    \"subtitle\": \"\\\"x被赋值为0，所以我们一般会推测它的类型为number。对于这种显而易见的类型，TypeScript\",\n    \"允许我们省略类型声明\\\"\": true\n  }), \"                      let x = 0;\\n\\n                      x = 1; // OK\\n                      x = '1'; // error\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1:10\",\n    \"1:10\": true\n  }), \"const x = [0, 1, null];\\nconst zoo = [new Rhino(), new Elephant(), new Snake()];\\n\\n<button\\n  onClick={(event) => {\\n    console.log(event);\\n  }}\\n>\\n  \\u70B9\\u51FB\\u6211\\n</button>;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1 title=\\\"类型推论\\\" subtitle=\\\"x的类型推断为：(number | null)[]\\\"\",\n    \"title\": \"\\\"类型推论\\\"\",\n    \"subtitle\": \"\\\"x的类型推断为：(number\",\n    \"|\": true,\n    \"null)[]\\\"\": true\n  }), \"const x = [0, 1, null];\\nconst zoo = [new Rhino(), new Elephant(), new Snake()];\\n\\n<button\\n  onClick={(event) => {\\n    console.log(event);\\n  }}\\n>\\n  \\u70B9\\u51FB\\u6211\\n</button>;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2 title=\\\"类型推论\\\" subtitle=\\\"zoo类型推断为：(Rhino | Elephant | Snake)[]\\\"\",\n    \"title\": \"\\\"类型推论\\\"\",\n    \"subtitle\": \"\\\"zoo类型推断为：(Rhino\",\n    \"|\": true,\n    \"Elephant\": true,\n    \"Snake)[]\\\"\": true\n  }), \"const x = [0, 1, null];\\nconst zoo = [new Rhino(), new Elephant(), new Snake()];\\n\\n<button\\n  onClick={(event) => {\\n    console.log(event);\\n  }}\\n>\\n  \\u70B9\\u51FB\\u6211\\n</button>;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5:7 title=\\\"类型推论\\\" subtitle=\\\"event类型推断为：React.MouseEvent<HTMLButtonElement>\\\"\",\n    \"5:7\": true,\n    \"title\": \"\\\"类型推论\\\"\",\n    \"subtitle\": \"\\\"event类型推断为：React.MouseEvent<HTMLButtonElement>\\\"\"\n  }), \"const x = [0, 1, null];\\nconst zoo = [new Rhino(), new Elephant(), new Snake()];\\n\\n<button\\n  onClick={(event) => {\\n    console.log(event);\\n  }}\\n>\\n  \\u70B9\\u51FB\\u6211\\n</button>;\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"\\u6CDB\\u578B\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"span\", null, \"\\u7C7B\\u578B\\u53C2\\u6570\\u5316\\u3002\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"const items: Array<number> = [1, 2, 3];\\nconst names: Array<string> = ['\\u5F20\\u4E09', '\\u674E\\u56DB', '\\u738B\\u4E94'];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1 subtitle=\\\"Array<number>：数字数组\\\"\",\n    \"subtitle\": \"\\\"Array<number>：数字数组\\\"\"\n  }), \"const items: Array<number> = [1, 2, 3];\\nconst names: Array<string> = ['\\u5F20\\u4E09', '\\u674E\\u56DB', '\\u738B\\u4E94'];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"2 subtitle=\\\"Array<string>：字符串数组\\\"\",\n    \"subtitle\": \"\\\"Array<string>：字符串数组\\\"\"\n  }), \"const items: Array<number> = [1, 2, 3];\\nconst names: Array<string> = ['\\u5F20\\u4E09', '\\u674E\\u56DB', '\\u738B\\u4E94'];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1:2 subtitle=\\\"都是数组，但是通过<number>、<string>指定了数组元素类型\\\"\",\n    \"1:2\": true,\n    \"subtitle\": \"\\\"都是数组，但是通过<number>、<string>指定了数组元素类型\\\"\"\n  }), \"const items: Array<number> = [1, 2, 3];\\nconst names: Array<string> = ['\\u5F20\\u4E09', '\\u674E\\u56DB', '\\u738B\\u4E94'];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1:2 subtitle=\\\"这就是泛型\\\"\",\n    \"1:2\": true,\n    \"subtitle\": \"\\\"这就是泛型\\\"\"\n  }), \"const items: Array<number> = [1, 2, 3];\\nconst names: Array<string> = ['\\u5F20\\u4E09', '\\u674E\\u56DB', '\\u738B\\u4E94'];\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"\\u58F0\\u660E\\u7C7B\\u578B\\u53D8\\u91CF\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"      function createArray(length: number, value: any): any[] {\\n        return new Array(length).fill(value);\\n      }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1 subtitle=\\\"any[]不是我们期望的返回值类型\\\"\",\n    \"subtitle\": \"\\\"any[]不是我们期望的返回值类型\\\"\"\n  }), \"      function createArray(length: number, value: any): any[] {\\n        return new Array(length).fill(value);\\n      }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1 subtitle=\\\"如果value是string类型的，期望返回值类型是string[]\\\"\",\n    \"subtitle\": \"\\\"如果value是string类型的，期望返回值类型是string[]\\\"\"\n  }), \"      function createArray(length: number, value: string): string[] {\\n        return new Array(length).fill(value);\\n      }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1 subtitle=\\\"如果value是boolean类型的，期望返回值类型是boolean[]\\\"\",\n    \"subtitle\": \"\\\"如果value是boolean类型的，期望返回值类型是boolean[]\\\"\"\n  }), \"      function createArray(length: number, value: boolean): boolean[] {\\n        return new Array(length).fill(value);\\n      }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1 subtitle=\\\"如果value是Date类型的，期望返回值类型是Date[]\\\"\",\n    \"subtitle\": \"\\\"如果value是Date类型的，期望返回值类型是Date[]\\\"\"\n  }), \"      function createArray(length: number, value: Date): Date[] {\\n        return new Array(length).fill(value);\\n      }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1 subtitle=\\\"我们使用一个类型变量T，来代表value的类型\\\"\",\n    \"subtitle\": \"\\\"我们使用一个类型变量T，来代表value的类型\\\"\"\n  }), \"      function createArray(length: number, value: T): T[] {\\n        return new Array(length).fill(value);\\n      }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1 subtitle=\\\"那么返回值的类型就是T[]\\\"\",\n    \"subtitle\": \"\\\"那么返回值的类型就是T[]\\\"\"\n  }), \"      function createArray(length: number, value: T): T[] {\\n        return new Array(length).fill(value);\\n      }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1 subtitle=\\\"与变量一样，在使用类型变量之前，类型变量也需要声明\\\"\",\n    \"subtitle\": \"\\\"与变量一样，在使用类型变量之前，类型变量也需要声明\\\"\"\n  }), \"      function createArray<T>(length: number, value: T): T[] {\\n        return new Array(length).fill(value);\\n      }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1 subtitle=\\\"使用了类型变量的函数，称之为泛型函数\\\"\",\n    \"subtitle\": \"\\\"使用了类型变量的函数，称之为泛型函数\\\"\"\n  }), \"      function createArray<T>(length: number, value: T): T[] {\\n        return new Array(length).fill(value);\\n      }\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"\\u7ED9\\u7C7B\\u578B\\u53D8\\u91CF\\u8D4B\\u201C\\u503C\\u201D\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"p\", null, \"\\u8C03\\u7528\\u6CDB\\u578B\\u51FD\\u6570\\uFF0C\\u9700\\u8981\\u7ED9\\u7C7B\\u578B\\u53D8\\u91CF\\u8D4B\\u201C\\u503C\\u201D\"), mdx(\"p\", null, \"\\u8FD9\\u4E2A\\u201C\\u503C\\u201D\\u6307\\u7C7B\\u578B\\uFF0C\\u800C\\u975E\\u50CF1, '2', true\\u8FD9\\u6837\\u7684\\u771F\\u5B9E\\u503C\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"const items = createArray<number>(3, 1);\\nconst strs = createArray<string>(3, '');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1 subtitle=\\\"<number>给变量类型T赋值number\\\"\",\n    \"subtitle\": \"\\\"<number>给变量类型T赋值number\\\"\"\n  }), \"const items = createArray<number>(3, 1);\\nconst strs = createArray<string>(3, '');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"2 subtitle=\\\"<string>给变量类型T赋值string\\\"\",\n    \"subtitle\": \"\\\"<string>给变量类型T赋值string\\\"\"\n  }), \"const items = createArray<number>(3, 1);\\nconst strs = createArray<string>(3, '');\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"\\u6CDB\\u578B\\u7684\\u7C7B\\u578B\\u63A8\\u8BBA\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1 subtitle=\\\"value = 1\\\"\",\n    \"subtitle\": \"\\\"value\",\n    \"\": \"\",\n    \"1\\\"\": true\n  }), \"const items = createArray<number>(3, 1);\\nconst strs = createArray<string>(3, '');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1 subtitle=\\\"value = 1 ==> value: number\\\"\",\n    \"subtitle\": \"\\\"value\",\n    \"\": \"\",\n    \"value:\": true,\n    \"number\\\"\": true\n  }), \"const items = createArray<number>(3, 1);\\nconst strs = createArray<string>(3, '');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1 subtitle=\\\"value = 1 ==> value: number ==> T = number\\\"\",\n    \"subtitle\": \"\\\"value\",\n    \"\": \"\",\n    \"value:\": true,\n    \"number\": true,\n    \"T\": true,\n    \"number\\\"\": true\n  }), \"const items = createArray<number>(3, 1);\\nconst strs = createArray<string>(3, '');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1 subtitle=\\\"应用类型推论规则，可以省略掉给T的赋值<number>\\\"\",\n    \"subtitle\": \"\\\"应用类型推论规则，可以省略掉给T的赋值<number>\\\"\"\n  }), \"const items = createArray(3, 1);\\nconst strs = createArray<string>(3, '');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"2 subtitle=\\\"value = '' ==> value: string ==> T = string\\\"\",\n    \"subtitle\": \"\\\"value\",\n    \"\": \"\",\n    \"''\": true,\n    \"value:\": true,\n    \"string\": true,\n    \"T\": true,\n    \"string\\\"\": true\n  }), \"const items = createArray(3, 1);\\nconst strs = createArray<string>(3, '');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"2 subtitle=\\\"省略掉<string>\\\"\",\n    \"subtitle\": \"\\\"省略掉<string>\\\"\"\n  }), \"const items = createArray(3, 1);\\nconst strs = createArray(3, '');\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"\\u6CDB\\u578B\\u63A5\\u53E3\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"interface List<T> {\\n  length: number;\\n  items: T[];\\n  get(index: number): T;\\n}\\n\\nconst items: List<number> = {\\n  length: 3,\\n  items: [1, 2, 3],\\n  get(index: number) {\\n    return this.items[index];\\n  },\\n};\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"class List<T> {\\n  public items: T[];\\n\\n  public constructor(items: T[]) {\\n    this.items = items;\\n  }\\n\\n  public get length() {\\n    return this.items.length;\\n  }\\n\\n  public getItem(index: number): T {\\n    return this.items[index];\\n  }\\n}\\n\\nconst items = new List<number>([1, 2, 3]);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"17\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"17 subtitle=\\\"又一个可以应用类型推论的地方\\\"\",\n    \"subtitle\": \"\\\"又一个可以应用类型推论的地方\\\"\"\n  }), \"class List<T> {\\n  public items: T[];\\n\\n  public constructor(items: T[]) {\\n    this.items = items;\\n  }\\n\\n  public get length() {\\n    return this.items.length;\\n  }\\n\\n  public getItem(index: number): T {\\n    return this.items[index];\\n  }\\n}\\n\\nconst items = new List<number>([1, 2, 3]);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"17\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"17 subtitle=\\\"items = [1, 2, 3] ==> items: number[] ==> T = number\\\"\",\n    \"subtitle\": \"\\\"items\",\n    \"\": \"\",\n    \"[1,\": true,\n    \"2,\": true,\n    \"3]\": true,\n    \"items:\": true,\n    \"number[]\": true,\n    \"T\": true,\n    \"number\\\"\": true\n  }), \"class List<T> {\\n  public items: T[];\\n\\n  public constructor(items: T[]) {\\n    this.items = items;\\n  }\\n\\n  public get length() {\\n    return this.items.length;\\n  }\\n\\n  public getItem(index: number): T {\\n    return this.items[index];\\n  }\\n}\\n\\nconst items = new List<number>([1, 2, 3]);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"17\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"17 subtitle=\\\"省略掉<number>\\\"\",\n    \"subtitle\": \"\\\"省略掉<number>\\\"\"\n  }), \"class List<T> {\\n  public items: T[];\\n\\n  public constructor(items: T[]) {\\n    this.items = items;\\n  }\\n\\n  public get length() {\\n    return this.items.length;\\n  }\\n\\n  public getItem(index: number): T {\\n    return this.items[index];\\n  }\\n}\\n\\nconst items = new List([1, 2, 3]);\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"\\u6CDB\\u578B\\u7EA6\\u675F\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"p\", null, \"\\u89C4\\u5B9A\\u6CDB\\u578B\\u5FC5\\u987B\\u9075\\u5FAA\\u7684\\u89C4\\u5219\\u3002\"), mdx(\"p\", null, \"\\u4F7F\\u7528\", mdx(\"strong\", null, \"extends\"), \"\\u5173\\u952E\\u5B57\\u6DFB\\u52A0\\u6CDB\\u578B\\u7EA6\\u675F\\u3002\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"        interface Lengthwise {\\n          length: number;\\n        }\\n\\n        function loggingIdentity<T extends Lengthwise>(arg: T): T {\\n          console.log(arg.length); // ok\\n          return arg;\\n        }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"5 subtitle=\\\"T必须有length: number属性\\\"\",\n    \"subtitle\": \"\\\"T必须有length:\",\n    \"number属性\\\"\": true\n  }), \"        interface Lengthwise {\\n          length: number;\\n        }\\n\\n        function loggingIdentity<T extends Lengthwise>(arg: T): T {\\n          console.log(arg.length); // ok\\n          return arg;\\n        }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-typescript\",\n    \"metastring\": \"6 subtitle=\\\"arg是T类型的，所以它有length属性\\\"\",\n    \"subtitle\": \"\\\"arg是T类型的，所以它有length属性\\\"\"\n  }), \"        interface Lengthwise {\\n          length: number;\\n        }\\n\\n        function loggingIdentity<T extends Lengthwise>(arg: T): T {\\n          console.log(arg.length); // ok\\n          return arg;\\n        }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\",\n    \"metastring\": \"1:3\",\n    \"1:3\": true\n  }), \"        loggingIdentity(3); // error\\n\\n        loggingIdentity({ length: 10, value: 3 }); // OK\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"\\u6CDB\\u578B\\u53C2\\u6570\\u9ED8\\u8BA4\\u503C\"), mdx(\"p\", null, \"\\u901A\\u8FC7\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<T = \\u9ED8\\u8BA4\\u7C7B\\u578B>\"), \"\\u4E3A\\u6CDB\\u578B\\u6307\\u5B9A\\u9ED8\\u8BA4\\u7684\\u7C7B\\u578B\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"function getItemElements<T extends Element = HTMLDivElement>(): NodeListOf<T> {\\n  return document.querySelectorAll<T>('.item');\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"\\u9AD8\\u7EA7\\u7C7B\\u578B\"), mdx(\"hr\", null), mdx(\"h3\", null, \"\\u7C7B\\u578B\\u522B\\u540D\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type AnotherTypeName = string | number | null\")), mdx(\"hr\", null), mdx(\"h3\", null, \"\\u76F8\\u4EA4\\u7C7B\\u578B\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"p\", null, \"T0 = T1 & T2 ===> T0\\u65E2\\u662FT1\\u53C8\\u662FT2\"), mdx(\"p\", null, \"T0 = T1 & T2 ===> T0\\u5305\\u542B\\u6240\\u6709T1\\u548CT2\\u5B9A\\u4E49\\u7684\\u5C5E\\u6027\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"// \\u4E8C\\u7EF4\\u70B9\\ninterface Point {\\n  readonly x: number;\\n  readonly y: number;\\n}\\n\\n// \\u7B2C\\u4E09\\u7EF4\\u5EA6\\u5750\\u6807\\ninterface ZCoordinate {\\n  readonly z: number;\\n}\\n\\n// \\u4E09\\u7EF4\\u70B9\\ntype ThreeDimensionalPoint = Point & ZCoordinate;\\n\\n/*\\nThreeDimensionalPoint\\u76F8\\u5F53\\u4E8E\\uFF1A\\n\\n{\\n  readonly x: number;\\n  readonly y: number;\\n  readonly z: number;\\n}\\n*/\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"\\u8054\\u5408\\u7C7B\\u578B\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"p\", null, \"T0 = T1 | T2 | T3 ===> T0\\u53EA\\u80FD\\u662FT1\\u3001T2\\u3001T3\\u4E09\\u8005\\u4E4B\\u4E00\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"let item: string | number | undefined;\\n\\nitem = '1'; // OK\\nitem = undefined; // OK\\nitem = 1; // OK\\nitem = false; // error\\nitem = null; // error\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"\\u4E00\\u53E5\\u9879\\u76EE\\u5730\\u5740\\uFF1A\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/justOneWord\"\n  }), \"https://github.com/justOneWord\")), mdx(\"p\", null, \"\\u672C\\u6587\\u6863\\u5730\\u5740\\uFF1A\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Yaob1990/ts-ppt\"\n  }), \"https://github.com/Yaob1990/ts-ppt\")), mdx(\"hr\", null), mdx(\"p\", null, \"\\u8C22\\u8C22\\uFF01\\uFF01\\uFF01\\uFF01\"), mdx(\"p\", null, \"\\uD83D\\uDC4F\\uD83D\\uDC4F\\uD83D\\uDC4F\"), mdx(\"p\", null, \"\\uD83C\\uDF89\\uD83C\\uDF89\\uD83C\\uDF89\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"d5d35288-f212-5055-934b-6c2f1a09339e","slug":"","title":"typescript 特性速览"}}}